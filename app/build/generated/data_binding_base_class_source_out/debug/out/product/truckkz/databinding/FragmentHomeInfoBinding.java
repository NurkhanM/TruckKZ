// Generated by view binder compiler. Do not edit!
package product.truckkz.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.core.widget.NestedScrollView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import product.truckkz.R;

public final class FragmentHomeInfoBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final LinearLayout UpdateWorkError;

  @NonNull
  public final MaterialButton btnBook;

  @NonNull
  public final ImageView clickUpdateBackCard;

  @NonNull
  public final TextView dopTextUpdate;

  @NonNull
  public final NestedScrollView fragmentContainerUpdate;

  @NonNull
  public final ImageView imageMove;

  @NonNull
  public final ImageView imageShow;

  @NonNull
  public final ImageView imgFavorite;

  @NonNull
  public final LinearLayout itemFavorite;

  @NonNull
  public final LinearLayout liner2first;

  @NonNull
  public final LinearLayout linerImageMove;

  @NonNull
  public final LinearLayout linerfirst;

  @NonNull
  public final RecyclerView recyclerUpdate;

  @NonNull
  public final TextView textDescription;

  @NonNull
  public final TextView textHarakter;

  @NonNull
  public final TextView textPrice;

  @NonNull
  public final TextView textTitle;

  @NonNull
  public final TextView updatePrice;

  @NonNull
  public final ConstraintLayout updateToolbar;

  private FragmentHomeInfoBinding(@NonNull ConstraintLayout rootView,
      @NonNull LinearLayout UpdateWorkError, @NonNull MaterialButton btnBook,
      @NonNull ImageView clickUpdateBackCard, @NonNull TextView dopTextUpdate,
      @NonNull NestedScrollView fragmentContainerUpdate, @NonNull ImageView imageMove,
      @NonNull ImageView imageShow, @NonNull ImageView imgFavorite,
      @NonNull LinearLayout itemFavorite, @NonNull LinearLayout liner2first,
      @NonNull LinearLayout linerImageMove, @NonNull LinearLayout linerfirst,
      @NonNull RecyclerView recyclerUpdate, @NonNull TextView textDescription,
      @NonNull TextView textHarakter, @NonNull TextView textPrice, @NonNull TextView textTitle,
      @NonNull TextView updatePrice, @NonNull ConstraintLayout updateToolbar) {
    this.rootView = rootView;
    this.UpdateWorkError = UpdateWorkError;
    this.btnBook = btnBook;
    this.clickUpdateBackCard = clickUpdateBackCard;
    this.dopTextUpdate = dopTextUpdate;
    this.fragmentContainerUpdate = fragmentContainerUpdate;
    this.imageMove = imageMove;
    this.imageShow = imageShow;
    this.imgFavorite = imgFavorite;
    this.itemFavorite = itemFavorite;
    this.liner2first = liner2first;
    this.linerImageMove = linerImageMove;
    this.linerfirst = linerfirst;
    this.recyclerUpdate = recyclerUpdate;
    this.textDescription = textDescription;
    this.textHarakter = textHarakter;
    this.textPrice = textPrice;
    this.textTitle = textTitle;
    this.updatePrice = updatePrice;
    this.updateToolbar = updateToolbar;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentHomeInfoBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentHomeInfoBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_home_info, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentHomeInfoBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.UpdateWorkError;
      LinearLayout UpdateWorkError = ViewBindings.findChildViewById(rootView, id);
      if (UpdateWorkError == null) {
        break missingId;
      }

      id = R.id.btnBook;
      MaterialButton btnBook = ViewBindings.findChildViewById(rootView, id);
      if (btnBook == null) {
        break missingId;
      }

      id = R.id.clickUpdateBackCard;
      ImageView clickUpdateBackCard = ViewBindings.findChildViewById(rootView, id);
      if (clickUpdateBackCard == null) {
        break missingId;
      }

      id = R.id.dop_text_update;
      TextView dopTextUpdate = ViewBindings.findChildViewById(rootView, id);
      if (dopTextUpdate == null) {
        break missingId;
      }

      id = R.id.fragmentContainerUpdate;
      NestedScrollView fragmentContainerUpdate = ViewBindings.findChildViewById(rootView, id);
      if (fragmentContainerUpdate == null) {
        break missingId;
      }

      id = R.id.imageMove;
      ImageView imageMove = ViewBindings.findChildViewById(rootView, id);
      if (imageMove == null) {
        break missingId;
      }

      id = R.id.image_show;
      ImageView imageShow = ViewBindings.findChildViewById(rootView, id);
      if (imageShow == null) {
        break missingId;
      }

      id = R.id.img_favorite;
      ImageView imgFavorite = ViewBindings.findChildViewById(rootView, id);
      if (imgFavorite == null) {
        break missingId;
      }

      id = R.id.item_favorite;
      LinearLayout itemFavorite = ViewBindings.findChildViewById(rootView, id);
      if (itemFavorite == null) {
        break missingId;
      }

      id = R.id.liner2first;
      LinearLayout liner2first = ViewBindings.findChildViewById(rootView, id);
      if (liner2first == null) {
        break missingId;
      }

      id = R.id.linerImageMove;
      LinearLayout linerImageMove = ViewBindings.findChildViewById(rootView, id);
      if (linerImageMove == null) {
        break missingId;
      }

      id = R.id.linerfirst;
      LinearLayout linerfirst = ViewBindings.findChildViewById(rootView, id);
      if (linerfirst == null) {
        break missingId;
      }

      id = R.id.recyclerUpdate;
      RecyclerView recyclerUpdate = ViewBindings.findChildViewById(rootView, id);
      if (recyclerUpdate == null) {
        break missingId;
      }

      id = R.id.textDescription;
      TextView textDescription = ViewBindings.findChildViewById(rootView, id);
      if (textDescription == null) {
        break missingId;
      }

      id = R.id.textHarakter;
      TextView textHarakter = ViewBindings.findChildViewById(rootView, id);
      if (textHarakter == null) {
        break missingId;
      }

      id = R.id.textPrice;
      TextView textPrice = ViewBindings.findChildViewById(rootView, id);
      if (textPrice == null) {
        break missingId;
      }

      id = R.id.textTitle;
      TextView textTitle = ViewBindings.findChildViewById(rootView, id);
      if (textTitle == null) {
        break missingId;
      }

      id = R.id.updatePrice;
      TextView updatePrice = ViewBindings.findChildViewById(rootView, id);
      if (updatePrice == null) {
        break missingId;
      }

      id = R.id.updateToolbar;
      ConstraintLayout updateToolbar = ViewBindings.findChildViewById(rootView, id);
      if (updateToolbar == null) {
        break missingId;
      }

      return new FragmentHomeInfoBinding((ConstraintLayout) rootView, UpdateWorkError, btnBook,
          clickUpdateBackCard, dopTextUpdate, fragmentContainerUpdate, imageMove, imageShow,
          imgFavorite, itemFavorite, liner2first, linerImageMove, linerfirst, recyclerUpdate,
          textDescription, textHarakter, textPrice, textTitle, updatePrice, updateToolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
